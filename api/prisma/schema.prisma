// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  username    String
  password    String
  createdAt   DateTime    @default(now())
  tasks       Task[]
  sprints     Sprint[]
  taskNotes   TaskNote[]
  timeEntries TimeEntry[]
}

model Sprint {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  tasks       Task[]
}

model Task {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  completed       Boolean       @default(false)
  completedAt     DateTime?
  points          Int           @default(0)
  taskLink        String?       // Link da tarefa (ex: Jira, GitHub, etc.)
  priority        Priority      @default(MEDIUM)
  estimatedHours  Float?        // Tempo estimado em horas
  timeSpent       Float         @default(0) // Tempo gasto em horas
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  sprintId        Int?
  sprint          Sprint?       @relation(fields: [sprintId], references: [id])
  notes           TaskNote[]
  timeEntries     TimeEntry[]
}

model TaskNote {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model TimeEntry {
  id          Int      @id @default(autoincrement())
  description String?
  hours       Float
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime @default(now())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
